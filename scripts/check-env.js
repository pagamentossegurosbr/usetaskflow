const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('üîß VERIFICA√á√ÉO E CORRE√á√ÉO DE VARI√ÅVEIS DE AMBIENTE');
console.log('==================================================\n');

// Fun√ß√£o para gerar secret aleat√≥rio
function generateSecret(length = 32) {
  return crypto.randomBytes(length).toString('hex');
}

// Verificar arquivo .env.local
const envLocalPath = path.join(process.cwd(), '.env.local');
let envContent = '';

if (fs.existsSync(envLocalPath)) {
  console.log('üìÅ Arquivo .env.local encontrado');
  envContent = fs.readFileSync(envLocalPath, 'utf8');
} else {
  console.log('üìÅ Arquivo .env.local n√£o encontrado - criando...');
}

// Verificar vari√°veis cr√≠ticas
const requiredVars = {
  'NEXTAUTH_URL': 'http://localhost:3000',
  'NEXTAUTH_SECRET': generateSecret(32),
  'DATABASE_URL': 'postgresql://postgres:[YOUR-PASSWORD]@db.[YOUR-PROJECT-REF].supabase.co:5432/postgres',
  'GOOGLE_CLIENT_ID': 'your_google_client_id_here',
  'GOOGLE_CLIENT_SECRET': 'your_google_client_secret_here',
  'GITHUB_ID': 'your_github_id_here',
  'GITHUB_SECRET': 'your_github_secret_here',
  'NODE_ENV': 'development',
  'NEXT_PUBLIC_APP_ENV': 'development'
};

console.log('üîç Verificando vari√°veis de ambiente...\n');

let needsUpdate = false;
const missingVars = [];

for (const [varName, defaultValue] of Object.entries(requiredVars)) {
  if (!envContent.includes(`${varName}=`)) {
    console.log(`‚ùå ${varName}: AUSENTE`);
    missingVars.push(varName);
    needsUpdate = true;
  } else {
    console.log(`‚úÖ ${varName}: CONFIGURADO`);
  }
}

if (needsUpdate) {
  console.log('\nüìù Adicionando vari√°veis ausentes...\n');
  
  let newEnvContent = envContent;
  
  // Adicionar cabe√ßalho se arquivo estiver vazio
  if (!newEnvContent.trim()) {
    newEnvContent = `# ========================================
# CONFIGURA√á√ÉO DE DESENVOLVIMENTO - NOTCH TODO LIST
# ========================================

`;
  }
  
  // Adicionar vari√°veis ausentes
  for (const varName of missingVars) {
    const defaultValue = requiredVars[varName];
    newEnvContent += `${varName}=${defaultValue}\n`;
    console.log(`‚ûï Adicionado: ${varName}=${defaultValue}`);
  }
  
  // Salvar arquivo
  fs.writeFileSync(envLocalPath, newEnvContent);
  console.log('\n‚úÖ Arquivo .env.local atualizado com sucesso!');
} else {
  console.log('\n‚úÖ Todas as vari√°veis necess√°rias est√£o configuradas!');
}

console.log('\n==================================================');
console.log('üìã PR√ìXIMOS PASSOS:');
console.log('==================================================');
console.log('1. Configure as credenciais reais no arquivo .env.local:');
console.log('   - DATABASE_URL: URL do seu banco Supabase');
console.log('   - GOOGLE_CLIENT_ID/SECRET: Credenciais do Google OAuth');
console.log('   - GITHUB_ID/SECRET: Credenciais do GitHub OAuth');
console.log('   - NEXTAUTH_SECRET: Mantenha o valor gerado ou crie um novo');
console.log('\n2. Execute: npm run dev');
console.log('3. Teste a autentica√ß√£o em: http://localhost:3000/api/test-auth');
console.log('4. Verifique os logs do console para diagnosticar problemas');
console.log('==================================================');
